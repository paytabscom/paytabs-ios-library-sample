// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PaymentSDK
import AVFoundation
import CommonCrypto
import CoreTelephony
import Foundation
import PassKit
@_exported import PaymentSDK
import Swift
import SystemConfiguration
import UIKit
import VideoToolbox
import Vision
import WebKit
public protocol PaymentSDKMerchantConfiguration {
  var profileID: Swift.String { get set }
  var serverKey: Swift.String { get set }
  var clientKey: Swift.String { get set }
  var cartID: Swift.String { get set }
  var currency: Swift.String { get set }
  var amount: Swift.Double { get set }
  var cartDescription: Swift.String { get set }
  var languageCode: Swift.String? { get set }
  var tokeniseType: PaymentSDK.TokeniseType { get set }
  var tokenFormat: PaymentSDK.TokenFormat { get set }
  var merchantCountryCode: Swift.String { get set }
}
public protocol PaymentSDKApplePayConfiguration {
  var merchantIdentifier: Swift.String? { get set }
  var merchantName: Swift.String? { get set }
  var paymentNetworks: [PassKit.PKPaymentNetwork]? { get set }
}
open class PaymentSDKConfiguration : PaymentSDK.PaymentSDKMerchantConfiguration, PaymentSDK.PaymentSDKApplePayConfiguration, Swift.Codable {
  public var profileID: Swift.String
  public var serverKey: Swift.String
  public var clientKey: Swift.String
  public var transactionType: PaymentSDK.TransactionType
  public var transactionClass: PaymentSDK.TransactionClass
  public var cartID: Swift.String
  public var currency: Swift.String
  public var amount: Swift.Double
  public var cartDescription: Swift.String
  public var languageCode: Swift.String?
  public var theme: PaymentSDK.PaymentSDKTheme?
  public var forceShippingInfo: Swift.Bool
  public var showBillingInfo: Swift.Bool
  public var showShippingInfo: Swift.Bool
  public var billingDetails: PaymentSDK.PaymentSDKBillingDetails?
  public var shippingDetails: PaymentSDK.PaymentSDKShippingDetails?
  public var merchantIdentifier: Swift.String?
  public var paymentNetworks: [PassKit.PKPaymentNetwork]?
  public var merchantCountryCode: Swift.String
  public var serverIP: Swift.String?
  public var tokeniseType: PaymentSDK.TokeniseType
  public var tokenFormat: PaymentSDK.TokenFormat
  public var token: Swift.String?
  public var transactionReference: Swift.String?
  public var screenTitle: Swift.String?
  public var merchantName: Swift.String?
  public var hideCardScanner: Swift.Bool
  public var simplifyApplePayValidation: Swift.Bool
  public var alternativePaymentMethods: [PaymentSDK.AlternativePaymentMethod]?
  public var linkBillingNameWithCard: Swift.Bool
  public init()
  public init(profileID: Swift.String, serverKey: Swift.String, clientKey: Swift.String, currency: Swift.String, amount: Swift.Double, merchantCountryCode: Swift.String)
  public init(profileID: Swift.String, serverKey: Swift.String, clientKey: Swift.String, cartID: Swift.String, currency: Swift.String, amount: Swift.Double, cartDescription: Swift.String, languageCode: Swift.String? = nil, merchantCountryCode: Swift.String, tokeniseType: PaymentSDK.TokeniseType = .none, tokenFormat: PaymentSDK.TokenFormat = .hex32, token: Swift.String? = nil, transactionreference: Swift.String? = nil, serverIP: Swift.String? = nil, merchantIdentifier: Swift.String? = nil, paymentNetworks: [PassKit.PKPaymentNetwork]? = nil, forceShippingInfo: Swift.Bool = false, showBillingInfo: Swift.Bool = false, showShippingInfo: Swift.Bool = false, screenTitle: Swift.String? = nil, merchantName: Swift.String? = nil, hideCardScanner: Swift.Bool = false, billingDetails: PaymentSDK.PaymentSDKBillingDetails, shippingDetails: PaymentSDK.PaymentSDKShippingDetails? = nil, theme: PaymentSDK.PaymentSDKTheme? = PaymentSDKTheme.default, linkBillingNameWithCard: Swift.Bool = true)
  public init(profileID: Swift.String, serverKey: Swift.String, clientKey: Swift.String, cartID: Swift.String, currency: Swift.String, amount: Swift.Double, merchantName: Swift.String, cartDescription: Swift.String, languageCode: Swift.String? = nil, tokeniseType: PaymentSDK.TokeniseType = .none, tokenFormat: PaymentSDK.TokenFormat = .hex32, token: Swift.String? = nil, transactionreference: Swift.String? = nil, merchantCountryCode: Swift.String, serverIP: Swift.String? = nil, merchantIdentifier: Swift.String, paymentNetworks: [PassKit.PKPaymentNetwork]?, simplifyApplePayValidation: Swift.Bool = false, forceShippingInfo: Swift.Bool = false, billingDetails: PaymentSDK.PaymentSDKBillingDetails? = nil, shippingDetails: PaymentSDK.PaymentSDKShippingDetails? = nil, linkBillingNameWithCard: Swift.Bool = true)
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDKConfiguration : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers open class PaymentSDKCardInputView : UIKit.UIView {
  public var paymentSDKCardParams: PaymentSDK.PaymentSDKCardParams? {
    get
    set
  }
  public var onCardParamsChanged: ((PaymentSDK.PaymentSDKCardParams?) -> Swift.Void)? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  public func hideCardScanner(isHidden: Swift.Bool)
  @objc deinit
}
extension PKPaymentMethodType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct UIConfiguration {
}
@_hasMissingDesignatedInitializers public class PaymentSDKCardParams {
  public var cardNumber: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PaymentSDKBillingDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var email: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var addressLine: Swift.String?
  @objc public var city: Swift.String?
  @objc public var state: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var zip: Swift.String?
  @objc override dynamic public init()
  public init(name: Swift.String?, email: Swift.String?, phone: Swift.String?, addressLine: Swift.String?, city: Swift.String?, state: Swift.String?, countryCode: Swift.String?, zip: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDKBillingDetails : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension PaymentSDKConfiguration {
  @discardableResult
  public func profileID(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func serverKey(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func clientKey(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func transactionType(_ value: PaymentSDK.TransactionType) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func transactionClass(_ value: PaymentSDK.TransactionClass) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func cartID(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func currency(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func amount(_ value: Swift.Double) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func cartDescription(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func languageCode(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func theme(_ value: PaymentSDK.PaymentSDKTheme) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func forceShippingInfo(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func showBillingInfo(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func showShippingInfo(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func billingDetails(_ value: PaymentSDK.PaymentSDKBillingDetails) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func shippingDetails(_ value: PaymentSDK.PaymentSDKShippingDetails) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func merchantAppleBundleID(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func applePayPaymentNetworks(_ value: [PassKit.PKPaymentNetwork]) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func merchantCountryCode(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func serverIP(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func tokeniseType(_ value: PaymentSDK.TokeniseType) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func tokenFormat(_ value: PaymentSDK.TokenFormat) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func tokenisation(token: Swift.String, transactionReference: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func token(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func transactionReference(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func screenTitle(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func merchantName(_ value: Swift.String) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func hideCardScanner(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func simplifyApplePayValidation(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func alternativePaymentMehtods(_ value: [PaymentSDK.AlternativePaymentMethod]) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func addAlternativePaymentMethod(_ value: PaymentSDK.AlternativePaymentMethod) -> PaymentSDK.PaymentSDKConfiguration
  @discardableResult
  public func linkBillingNameWithCard(_ value: Swift.Bool) -> PaymentSDK.PaymentSDKConfiguration
}
public protocol ThemeConfiguration {
  var logoImage: UIKit.UIImage? { get set }
  var secondaryColor: UIKit.UIColor? { get set }
  var secondaryFontColor: UIKit.UIColor? { get set }
  var secondaryFont: UIKit.UIFont? { get set }
  var primaryColor: UIKit.UIColor? { get set }
  var primaryFontColor: UIKit.UIColor? { get set }
  var primaryFont: UIKit.UIFont? { get set }
  var buttonColor: UIKit.UIColor? { get set }
  var buttonFontColor: UIKit.UIColor? { get set }
  var buttonFont: UIKit.UIFont? { get set }
  var titleFontColor: UIKit.UIColor? { get set }
  var titleFont: UIKit.UIFont? { get set }
  var backgroundColor: UIKit.UIColor? { get set }
  var placeholderColor: UIKit.UIColor? { get set }
  var strokeColor: UIKit.UIColor? { get set }
  var strokeThinckness: CoreGraphics.CGFloat? { get set }
  var inputsCornerRadius: CoreGraphics.CGFloat? { get set }
  var backButtonColor: UIKit.UIColor? { get set }
}
public class PaymentSDKTheme : PaymentSDK.ThemeConfiguration {
  public var logoImage: UIKit.UIImage?
  public var primaryColor: UIKit.UIColor?
  public var primaryFontColor: UIKit.UIColor?
  public var primaryFont: UIKit.UIFont?
  public var secondaryColor: UIKit.UIColor?
  public var secondaryFontColor: UIKit.UIColor?
  public var secondaryFont: UIKit.UIFont?
  public var strokeColor: UIKit.UIColor?
  public var strokeThinckness: CoreGraphics.CGFloat?
  public var inputsCornerRadius: CoreGraphics.CGFloat?
  public var buttonColor: UIKit.UIColor?
  public var buttonFontColor: UIKit.UIColor?
  public var buttonFont: UIKit.UIFont?
  public var titleFontColor: UIKit.UIColor?
  public var titleFont: UIKit.UIFont?
  public var backgroundColor: UIKit.UIColor?
  public var placeholderColor: UIKit.UIColor?
  public var backButtonColor: UIKit.UIColor?
  public init()
  public static var `default`: PaymentSDK.PaymentSDKTheme {
    get
  }
  @objc deinit
}
extension PaymentSDKTheme : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_hasMissingDesignatedInitializers @objc public class PaymentResultViewModel : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let responseStatus: Swift.String?, responseCode: Swift.String?, responseMessage: Swift.String?
  @objc final public let transactionTime: Swift.String?, acquirerMessage: Swift.String?, acquirerRRN: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class PaymentInfoViewModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var cardType: Swift.String?, cardScheme: Swift.String?, paymentDescription: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc open class PaymentSDKTransactionDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let token: Swift.String?, transactionReference: Swift.String?
  @objc final public let transactionType: Swift.String?, cartID: Swift.String?, cartDescription: Swift.String?
  @objc final public let cartCurrency: Swift.String?, cartAmount: Swift.String?
  @objc final public let paymentResult: PaymentSDK.PaymentResultViewModel?
  @objc final public let paymentInfo: PaymentSDK.PaymentInfoViewModel?
  @objc final public let billingDetails: PaymentSDK.PaymentSDKBillingDetails?
  @objc final public let shippingDetails: PaymentSDK.PaymentSDKShippingDetails?
  public func isPending() -> Swift.Bool
  public func isAuthorized() -> Swift.Bool
  public func isOnHold() -> Swift.Bool
  public func isProcessed() -> Swift.Bool
  public func isSuccess() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol CountryPickerViewDelegate : AnyObject {
  func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, didSelectCountry country: PaymentSDK.Country)
  func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, willShow viewController: PaymentSDK.CountryPickerViewController)
  func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, didShow viewController: PaymentSDK.CountryPickerViewController)
}
public protocol CountryPickerViewDataSource : AnyObject {
  func preferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
  func sectionTitleForPreferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  func showOnlyPreferredSection(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func sectionTitleLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  func sectionTitleLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  func cellLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  func cellLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  func cellImageViewSize(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreGraphics.CGSize
  func cellImageViewCornerRadius(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreGraphics.CGFloat
  func navigationTitle(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  func closeButtonNavigationItem(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIBarButtonItem?
  func searchBarPosition(in countryPickerView: PaymentSDK.CountryPickerView) -> PaymentSDK.SearchBarPosition
  func showPhoneCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func showCountryCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func showCheckmarkInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  func localeForCountryNameInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Foundation.Locale
  func excludedCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
}
extension CountryPickerViewDataSource {
  public func preferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
  public func sectionTitleForPreferredCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  public func showOnlyPreferredSection(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func sectionTitleLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  public func sectionTitleLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  public func cellLabelFont(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIFont
  public func cellLabelColor(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIColor?
  public func cellImageViewCornerRadius(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreGraphics.CGFloat
  public func cellImageViewSize(in countryPickerView: PaymentSDK.CountryPickerView) -> CoreGraphics.CGSize
  public func navigationTitle(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.String?
  public func closeButtonNavigationItem(in countryPickerView: PaymentSDK.CountryPickerView) -> UIKit.UIBarButtonItem?
  public func searchBarPosition(in countryPickerView: PaymentSDK.CountryPickerView) -> PaymentSDK.SearchBarPosition
  public func showPhoneCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func showCountryCodeInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func showCheckmarkInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Swift.Bool
  public func localeForCountryNameInList(in countryPickerView: PaymentSDK.CountryPickerView) -> Foundation.Locale
  public func excludedCountries(in countryPickerView: PaymentSDK.CountryPickerView) -> [PaymentSDK.Country]
}
extension CountryPickerViewDelegate {
  public func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, willShow viewController: PaymentSDK.CountryPickerViewController)
  public func countryPickerView(_ countryPickerView: PaymentSDK.CountryPickerView, didShow viewController: PaymentSDK.CountryPickerViewController)
}
public enum TransactionType : Swift.String, Swift.CaseIterable {
  case sale
  case authorize
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.TransactionType]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.TransactionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionClass : Swift.String, Swift.CaseIterable {
  case ecom
  case recur
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.TransactionClass]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.TransactionClass] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TokenFormat : Swift.String, Swift.CaseIterable {
  case none
  case hex32
  case alphaNum20
  case digit22
  case digit16
  case alphaNum32
  public static func getType(type: Swift.String) -> PaymentSDK.TokenFormat?
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.TokenFormat]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.TokenFormat] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TokeniseType : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case none
  case merchantMandatory
  case userMandatory
  case userOptinoal
  public static func getType(type: Swift.Int) -> PaymentSDK.TokeniseType?
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PaymentSDK.TokeniseType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PaymentSDK.TokeniseType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum AlternativePaymentMethod : Swift.String, Swift.CaseIterable {
  case unionPay
  case stcPay
  case valu
  case meezaQR
  case omannet
  case knetCredit
  case knetDebit
  case fawry
  public static func getType(type: Swift.String) -> PaymentSDK.AlternativePaymentMethod?
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PaymentSDK.AlternativePaymentMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [PaymentSDK.AlternativePaymentMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum PaymentSDKError : Swift.Error {
  case emptyCreditCardHolderName
  case emptyCreditCardNumber
  case emptyCreditExpiryDate
  case emptyCreditCardCVV
  case invalidCreditCardHolderName
  case invalidCreditCardNumber
  case invalidCreditExpiryDate
  case expiredCreditExpiryDate
  case invalidCreditCardCVV
  case missingBillingInfo
  case emptyBillingFullName
  case emptyBillingEmail
  case emptyBillingAddress
  case emptyBillingPhone
  case emptyBillingCity
  case emptyBillingCountry
  case emptyBillingState
  case emptyBillingZIPCode
  case invalidBillingFullName
  case invalidBillingEmail
  case invalidBillingAddress
  case invalidBillingPhone
  case invalidBillingCity
  case invalidBillingCountry
  case invalidBillingState
  case invalidBillingZIPCode
  case missingShippingInfo
  case emptyShippingFullName
  case emptyShippingEmail
  case emptyShippingAddress
  case emptyShippingPhone
  case emptyShippingCity
  case emptyShippingCountry
  case emptyShippingState
  case emptyShippingZIPCode
  case invalidShippingFullName
  case invalidShippingEmail
  case invalidShippingAddress
  case invalidShippingPhone
  case invalidShippingCity
  case invalidShippingCountry
  case invalidShippingState
  case invalidShippingZIPCode
  case emptyProfileId
  case invalidProfileId
  case emptyServerKey
  case emptyClientKey
  case invalidAmount
  case emptyCartId
  case emptyCurrency
  case invalidCurrency
  case emptyCartDescription
  case emptyMerchantIndentifier
  case emptyMerchantName
  case missingMerchantCountryCode
  case invalidMerchantCountryCode
  case userNotAuthorizeForSelectedNetworks
  case somethingWentWrong
  case emptyAlternativePaymentMethods
  case applePayOnSimulatorNotSupported
  public static func == (a: PaymentSDK.PaymentSDKError, b: PaymentSDK.PaymentSDKError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NibView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension PaymentSDKCardInputView {
  @discardableResult
  public func setMerchnatLogo(image: UIKit.UIImage) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  public func setPrimaryColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  public func setSecondaryColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  public func setSecondaryFontColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  public func setPrimaryFont(font: UIKit.UIFont) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  public func setStrokeColor(color: UIKit.UIColor) -> PaymentSDK.PaymentSDKCardInputView
  @discardableResult
  public func setInputsCornerRadius(radius: CoreGraphics.CGFloat) -> PaymentSDK.PaymentSDKCardInputView
}
extension PaymentManager {
  public static func startApplePayPayment(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, delegate: PaymentSDK.PaymentManagerDelegate?)
}
@objc @_inheritsConvenienceInitializers public class CountryPickerViewController : UIKit.UITableViewController {
  public var searchController: UIKit.UISearchController?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CountryPickerViewController {
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc override dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
}
extension CountryPickerViewController {
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension CountryPickerViewController : UIKit.UISearchResultsUpdating {
  @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
extension CountryPickerViewController : UIKit.UISearchBarDelegate {
  @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @objc dynamic public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
}
extension CountryPickerViewController : UIKit.UISearchControllerDelegate {
  @objc dynamic public func willPresentSearchController(_ searchController: UIKit.UISearchController)
  @objc dynamic public func willDismissSearchController(_ searchController: UIKit.UISearchController)
}
public struct PayModels {
}
public typealias CPVCountry = PaymentSDK.Country
public enum SearchBarPosition {
  case tableViewHeader, navigationBar, hidden
  public static func == (a: PaymentSDK.SearchBarPosition, b: PaymentSDK.SearchBarPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Country : Swift.Equatable {
  public let name: Swift.String
  public let code: Swift.String
  public let phoneCode: Swift.String
  public func localizedName(_ locale: Foundation.Locale = Locale.current) -> Swift.String?
  public var flag: UIKit.UIImage {
    get
  }
}
public func == (lhs: PaymentSDK.Country, rhs: PaymentSDK.Country) -> Swift.Bool
public func != (lhs: PaymentSDK.Country, rhs: PaymentSDK.Country) -> Swift.Bool
@objc @_inheritsConvenienceInitializers public class CountryPickerView : PaymentSDK.NibView {
  @objc @IBOutlet weak public var flagImageView: UIKit.UIImageView! {
    @objc get
    @objc set
  }
  @objc @IBOutlet weak public var countryDetailsLabel: UIKit.UILabel!
  public var showCountryCodeInView: Swift.Bool {
    get
    set
  }
  public var showPhoneCodeInView: Swift.Bool {
    get
    set
  }
  public var showCountryNameInView: Swift.Bool {
    get
    set
  }
  public var font: UIKit.UIFont {
    get
    set
  }
  public var textColor: UIKit.UIColor {
    get
    set
  }
  public var flagSpacingInView: CoreGraphics.CGFloat {
    get
    set
  }
  weak public var dataSource: PaymentSDK.CountryPickerViewDataSource?
  weak public var delegate: PaymentSDK.CountryPickerViewDelegate?
  weak public var hostViewController: UIKit.UIViewController?
  public var selectedCountry: PaymentSDK.Country {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func showCountriesList(from viewController: UIKit.UIViewController)
  final public let countries: [PaymentSDK.Country]
  @objc deinit
}
extension CountryPickerView {
  public func setCountryByName(_ name: Swift.String)
  public func setCountryByPhoneCode(_ phoneCode: Swift.String)
  public func setCountryByCode(_ code: Swift.String)
  public func getCountryByName(_ name: Swift.String) -> PaymentSDK.Country?
  public func getCountryByPhoneCode(_ phoneCode: Swift.String) -> PaymentSDK.Country?
  public func getCountryByCode(_ code: Swift.String) -> PaymentSDK.Country?
}
@objc public protocol PaymentManagerDelegate {
  @objc func paymentManager(didFinishTransaction transactionDetails: PaymentSDK.PaymentSDKTransactionDetails?, error: Swift.Error?)
  @objc optional func paymentManager(didRecieveValidation error: Swift.Error?)
  @objc optional func paymentManager(didCancelPayment error: Swift.Error?)
  @objc optional func paymentManager(didStartPaymentTransaction rootViewController: UIKit.UIViewController)
}
@_inheritsConvenienceInitializers @objc public class PaymentManager : ObjectiveC.NSObject {
  public static func startCardPayment(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, delegate: PaymentSDK.PaymentManagerDelegate?)
  @objc override dynamic public init()
  @objc deinit
}
public func == (lhs: PaymentSDK.CreditCardValidationType, rhs: PaymentSDK.CreditCardValidationType) -> Swift.Bool
public struct CreditCardValidationType : Swift.Equatable {
  public var name: Swift.String
  public var regex: Swift.String
  public init(name: Swift.String, regex: Swift.String)
  public init(dict: [Swift.String : Any])
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: PaymentSDK.Model {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PaymentSDKShippingDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var email: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var addressLine: Swift.String?
  @objc public var city: Swift.String?
  @objc public var state: Swift.String?
  @objc public var countryCode: Swift.String?
  @objc public var zip: Swift.String?
  @objc override dynamic public init()
  public init(name: Swift.String?, email: Swift.String?, phone: Swift.String?, addressLine: Swift.String?, city: Swift.String?, state: Swift.String?, countryCode: Swift.String?, zip: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PaymentSDKShippingDetails : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension PaymentSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public class CreditCardValidator {
  public var types: [PaymentSDK.CreditCardValidationType] {
    get
    set
  }
  public init()
  public func getType(from string: Swift.String) -> PaymentSDK.CreditCardValidationType?
  public func validate(string: Swift.String) -> Swift.Bool
  public func validate(string: Swift.String, forType type: PaymentSDK.CreditCardValidationType) -> Swift.Bool
  public func onlyNumbers(string: Swift.String) -> Swift.String
  @objc deinit
}
extension PaymentManager {
  public static func startAlternativePaymentMethod(on rootViewController: UIKit.UIViewController, configuration: PaymentSDK.PaymentSDKConfiguration, delegate: PaymentSDK.PaymentManagerDelegate?)
}
extension PaymentSDK.TransactionType : Swift.Equatable {}
extension PaymentSDK.TransactionType : Swift.Hashable {}
extension PaymentSDK.TransactionType : Swift.RawRepresentable {}
extension PaymentSDK.TransactionClass : Swift.Equatable {}
extension PaymentSDK.TransactionClass : Swift.Hashable {}
extension PaymentSDK.TransactionClass : Swift.RawRepresentable {}
extension PaymentSDK.TokenFormat : Swift.Equatable {}
extension PaymentSDK.TokenFormat : Swift.Hashable {}
extension PaymentSDK.TokenFormat : Swift.RawRepresentable {}
extension PaymentSDK.TokeniseType : Swift.Equatable {}
extension PaymentSDK.TokeniseType : Swift.Hashable {}
extension PaymentSDK.TokeniseType : Swift.RawRepresentable {}
extension PaymentSDK.AlternativePaymentMethod : Swift.Equatable {}
extension PaymentSDK.AlternativePaymentMethod : Swift.Hashable {}
extension PaymentSDK.AlternativePaymentMethod : Swift.RawRepresentable {}
extension PaymentSDK.PaymentSDKError : Swift.Equatable {}
extension PaymentSDK.PaymentSDKError : Swift.Hashable {}
extension PaymentSDK.SearchBarPosition : Swift.Equatable {}
extension PaymentSDK.SearchBarPosition : Swift.Hashable {}
extension PaymentSDK.Model : Swift.Equatable {}
extension PaymentSDK.Model : Swift.Hashable {}
extension PaymentSDK.Model : Swift.RawRepresentable {}
